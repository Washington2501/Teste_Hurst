{
	"info": {
		"_postman_id": "e6eddf2d-26d9-4514-80fb-4a30c545a432",
		"name": "Teste Hurst",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8512018"
	},
	"item": [
		{
			"name": "Cenário Cadastrar usuário",
			"item": [
				{
					"name": "Cadastrar cliente - CPF válido",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function cpf() {",
									"  const rnd = (n) => Math.round(Math.random() * n);",
									"  const mod = (base, div) => Math.round(base - Math.floor(base / div) * div)",
									"  const n = Array(9).fill('').map(() => rnd(9));",
									"",
									"  let d1 = n.reduce((total, number, index) => (total + (number * (10 - index))), 0)",
									"  d1 = 11 - mod(d1, 11);",
									"  if (d1 >= 10) d1 = 0;",
									"  ",
									"  let d2 = (d1 * 2) + n.reduce((total, number, index) => (total + (number * (11 - index))), 0)",
									"  d2 = 11 - mod(d2, 11);",
									"  if (d2 >= 10) d2 = 0;",
									"",
									"  return `${n.join('')}${d1}${d2}`",
									"}",
									"",
									"// opicional para postman",
									"pm.variables.set('CPF', cpf());",
									"",
									"function gera_random(n){",
									"var ranNum = Math.round(Math.random()*n);",
									"return ranNum;",
									"}",
									"",
									"function mod(dividendo,divisor){",
									"    return Math.round(dividendo - (Math.floor(dividendo/divisor)*divisor));",
									"}",
									"",
									"function cnpj(){",
									"    var n = 9;",
									"    var n1 = gera_random(n);",
									"    var n2 = gera_random(n);",
									"    var n3 = gera_random(n);",
									"    var n4 = gera_random(n);",
									"    var n5 = gera_random(n);",
									"    var n6 = gera_random(n);",
									"    var n7 = gera_random(n);",
									"    var n8 = gera_random(n);",
									"    var n9 = 0;//gera_random(n);",
									"    var n10 = 0;//gera_random(n);",
									"    var n11 = 0;//gera_random(n);",
									"    var n12 = 1;//gera_random(n);",
									"    var d1 = n12*2+n11*3+n10*4+n9*5+n8*6+n7*7+n6*8+n5*9+n4*2+n3*3+n2*4+n1*5;",
									"    d1 = 11 - ( mod(d1,11) );",
									"    if (d1>=10) d1 = 0;",
									"        var d2 = d1*2+n12*3+n11*4+n10*5+n9*6+n8*7+n7*8+n6*9+n5*2+n4*3+n3*4+n2*5+n1*6;",
									"        d2 = 11 - ( mod(d2,11) );",
									"    if (d2>=10) d2 = 0;",
									"        resultado = ''+n1+n2+n3+n4+n5+n6+n7+n8+n9+n10+n11+n12+d1+d2;",
									"    return resultado;",
									"}",
									"",
									"// pm.environment.set('LEAD_CNPJ', cnpj());"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var body = JSON.parse(responseBody);",
									"var jsonData = pm.response.json();",
									"",
									"postman.setEnvironmentVariable(\"EMAIL\", body.data.email);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Should have a success true\", function () {",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Should have a data response\", function (){",
									"    pm.expect(pm.response.text()).to.include('\"data\":');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "apikey"
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cpf\": \"{{CPF}}\",\n  \"email\": \"{{$randomEmail}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"age\": 56,\n  \"description\": \"Descricao\",\n  \"password\": \"123Mudar\"\n}"
						},
						"url": {
							"raw": "{{URL_BASE}}/auth/sign-up",
							"host": [
								"{{URL_BASE}}"
							],
							"path": [
								"auth",
								"sign-up"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastrar cliente - CPF inválido",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var body = JSON.parse(responseBody);",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Should have a success false\", function () {",
									"    pm.expect(jsonData.success).to.eql(false);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "apikey"
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cpf\": \"00000000000\",\n  \"email\": \"{{$randomEmail}}\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"age\": 56,\n  \"description\": \"Descricao\",\n  \"password\": \"123Mudar\"\n}"
						},
						"url": {
							"raw": "{{URL_BASE}}/auth/sign-up",
							"host": [
								"{{URL_BASE}}"
							],
							"path": [
								"auth",
								"sign-up"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastrar cliente - E-mail inválido",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var body = JSON.parse(responseBody);",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Should have a success false\", function () {",
									"    pm.expect(jsonData.success).to.eql(false);",
									"});",
									"",
									"pm.test(\"Should have a validation error message\", function(){",
									"    pm.expect(jsonData.data.message).to.eql(\"Validation Failed\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {
							"content-type": true
						}
					},
					"request": {
						"auth": {
							"type": "apikey"
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"cpf\": \"{{CPF}}\",\n  \"email\": \"emailerrado@@qa.com\",\n  \"firstName\": \"{{$randomFirstName}}\",\n  \"lastName\": \"{{$randomLastName}}\",\n  \"age\": 56,\n  \"description\": \"Descricao\",\n  \"password\": \"123Mudar\"\n}"
						},
						"url": {
							"raw": "{{URL_BASE}}/auth/sign-up",
							"host": [
								"{{URL_BASE}}"
							],
							"path": [
								"auth",
								"sign-up"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cenário Login de usuário",
			"item": [
				{
					"name": "Sign-in - Login correto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var body = JSON.parse(responseBody);",
									"var jsonData = pm.response.json();",
									"",
									"postman.setEnvironmentVariable(\"JWT_TOKEN\", body.data.token);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Should have a success true\", function () {",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Should have a data response\", function (){",
									"    pm.expect(pm.response.text()).to.include('\"data\":');",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"password\": \"123Mudar\",\n  \"email\": \"{{EMAIL}}\"\n}"
						},
						"url": {
							"raw": "{{URL_BASE}}/auth/sign-in",
							"host": [
								"{{URL_BASE}}"
							],
							"path": [
								"auth",
								"sign-in"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign-in - Login senha incorreta",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var body = JSON.parse(responseBody);",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Should have a success false\", function () {",
									"    pm.expect(jsonData.success).to.eql(false);",
									"});",
									"",
									"pm.test(\"Should have a data response\", function (){",
									"    pm.expect(pm.response.text()).to.include('\"data\":');",
									"});",
									"",
									"pm.test(\"Should have a validation error message\", function(){",
									"    pm.expect(jsonData.data.message).to.eql(\"PASSWORD_NOT_MATCH\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"password\": \"456Mudar\",\n  \"email\": \"{{EMAIL}}\"\n}"
						},
						"url": {
							"raw": "{{URL_BASE}}/auth/sign-in",
							"host": [
								"{{URL_BASE}}"
							],
							"path": [
								"auth",
								"sign-in"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign-in - Login email incorreto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var body = JSON.parse(responseBody);",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Should have a success false\", function () {",
									"    pm.expect(jsonData.success).to.eql(false);",
									"});",
									"",
									"pm.test(\"Should have a data response\", function (){",
									"    pm.expect(pm.response.text()).to.include('\"data\":');",
									"});",
									"",
									"pm.test(\"Should have a validation error message\", function(){",
									"    pm.expect(jsonData.data.message).to.eql(\"USER_NOT_FOUND\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"password\": \"123Mudar\",\n  \"email\": \"emailerrado@qa.com\"\n}"
						},
						"url": {
							"raw": "{{URL_BASE}}/auth/sign-in",
							"host": [
								"{{URL_BASE}}"
							],
							"path": [
								"auth",
								"sign-in"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cenário Pesquisar usuário",
			"item": [
				{
					"name": "Pesquisar usuário - usuário existente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var body = JSON.parse(responseBody);",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Should have a success true\", function () {",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Should have a data response\", function (){",
									"    pm.expect(pm.response.text()).to.include('\"data\":');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{URL_BASE}}/account",
							"host": [
								"{{URL_BASE}}"
							],
							"path": [
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "Pesquisar usuário - usuário inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var body = JSON.parse(responseBody);",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Should have a success false\", function () {",
									"    pm.expect(jsonData.success).to.eql(false);",
									"});",
									"",
									"pm.test(\"Should have a data response\", function (){",
									"    pm.expect(pm.response.text()).to.include('\"data\":');",
									"});",
									"",
									"pm.test(\"Should have a validation error message\", function(){",
									"    pm.expect(jsonData.data.message).to.eql(\"UNAUTHORIZED\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token errado"
							}
						],
						"url": {
							"raw": "{{URL_BASE}}/account",
							"host": [
								"{{URL_BASE}}"
							],
							"path": [
								"account"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cenário Criar ‘todo’ de usuário",
			"item": [
				{
					"name": "Criar 'todo' corretamente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var body = JSON.parse(responseBody);",
									"var jsonData = pm.response.json();",
									"",
									"postman.setEnvironmentVariable(\"TODO_ID\", body.data.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Should have a success true\", function () {",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Should have a data response\", function (){",
									"    pm.expect(pm.response.text()).to.include('\"data\":');",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var criaNumero = pm.variables.replaceIn('{{$randomInt}}');",
									"postman.setEnvironmentVariable(\"CRIA_TODO\", criaNumero);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Description criado {{CRIA_TODO}}\",\n  \"name\": \"Name criado {{CRIA_TODO}}\",\n  \"userId\": \"UserId criado {{CRIA_TODO}}\",\n  \"createdAt\": \"{{$isoTimestamp}}\",\n  \"updatedAt\": \"{{$isoTimestamp}}\"\n}"
						},
						"url": {
							"raw": "{{URL_BASE}}/todo",
							"host": [
								"{{URL_BASE}}"
							],
							"path": [
								"todo"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cenário Adicionar ‘todo’ a usuário:",
			"item": [
				{
					"name": "Adicionar ‘todo’ ao usuário corretamente",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var criaNumero = pm.variables.replaceIn('{{$randomInt}}');",
									"postman.setEnvironmentVariable(\"ADICIONA_TODO\", criaNumero);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var body = JSON.parse(responseBody);",
									"var jsonData = pm.response.json();",
									"",
									"postman.setEnvironmentVariable(\"TODO_ID\", body.data.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Should have a success true\", function () {",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Should have a data response\", function (){",
									"    pm.expect(pm.response.text()).to.include('\"data\":');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\n  {\n    \"updatedAt\": \"{{$isoTimestamp}}\",\n    \"createdAt\": \"{{$isoTimestamp}}\",\n    \"userId\": \"UserId adicionado {{ADICIONA_TODO}}\",\n    \"description\": \"Description adicionado {{ADICIONA_TODO}}\",\n    \"name\": \"Name adicionado {{ADICIONA_TODO}}\",\n    \"id\": \"Id adicionado {{ADICIONA_TODO}}\"\n  }\n]"
						},
						"url": {
							"raw": "{{URL_BASE}}/todo/batch",
							"host": [
								"{{URL_BASE}}"
							],
							"path": [
								"todo",
								"batch"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cenário Obter um  “todo” de um usuário",
			"item": [
				{
					"name": "Obter um ‘todo’ de usuário",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var body = JSON.parse(responseBody);",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Should have a success true\", function () {",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Should have a data response and todo\", function (){",
									"    pm.expect(pm.response.text()).to.include('\"data\":');",
									"    pm.expect(pm.response.text()).to.include('\"todo\":');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{URL_BASE}}/todo/{{TODO_ID}}",
							"host": [
								"{{URL_BASE}}"
							],
							"path": [
								"todo",
								"{{TODO_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obter um ‘todo’ de usuário com id incorreto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var body = JSON.parse(responseBody);",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Should have a success false\", function () {",
									"    pm.expect(jsonData.success).to.eql(false);",
									"});",
									"",
									"pm.test(\"Should have a data response\", function (){",
									"    pm.expect(pm.response.text()).to.include('\"data\":');",
									"});",
									"",
									"pm.test(\"Should have a validation error message\", function(){",
									"    pm.expect(jsonData.data.message).to.eql(\"TODO_NOT_FOUND\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{URL_BASE}}/todo/12345",
							"host": [
								"{{URL_BASE}}"
							],
							"path": [
								"todo",
								"12345"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cenário Obter todos os “todo’s” de um usuário",
			"item": [
				{
					"name": "Obter todos os “todo’s” de um usuário existente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var body = JSON.parse(responseBody);",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Should have a success true\", function () {",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Should have a data response and todo\", function (){",
									"    pm.expect(pm.response.text()).to.include('\"data\":');",
									"    pm.expect(pm.response.text()).to.include('\"todo\":');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{URL_BASE}}/todo",
							"host": [
								"{{URL_BASE}}"
							],
							"path": [
								"todo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Obter todos os “todo’s” de um usuário inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var body = JSON.parse(responseBody);",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Should have a success false\", function () {",
									"    pm.expect(jsonData.success).to.eql(false);",
									"});",
									"",
									"pm.test(\"Should have a data response\", function (){",
									"    pm.expect(pm.response.text()).to.include('\"data\":');",
									"});",
									"",
									"pm.test(\"Should have a validation error message\", function(){",
									"    pm.expect(jsonData.data.message).to.eql(\"UNAUTHORIZED\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token errado"
							}
						],
						"url": {
							"raw": "{{URL_BASE}}/todo",
							"host": [
								"{{URL_BASE}}"
							],
							"path": [
								"todo"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cenário Atualizar um ‘todo’ de um usuário",
			"item": [
				{
					"name": "Atualizar ‘todo’ de usuário existente",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var atualizaNumero = pm.variables.replaceIn('{{$randomInt}}');",
									"postman.setEnvironmentVariable(\"ATUALIZA_TODO\", atualizaNumero);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var body = JSON.parse(responseBody);",
									"var jsonData = pm.response.json();",
									"",
									"postman.setEnvironmentVariable(\"TODO_ID\", body.data.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Should have a success true\", function () {",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Should have a data response\", function (){",
									"    pm.expect(pm.response.text()).to.include('\"data\":');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"updatedAt\": \"{{$isoTimestamp}}\",\n  \"createdAt\": \"{{$isoTimestamp}}\",\n  \"userId\": \"UserId atualizado {{ATUALIZA_TODO}}\",\n  \"description\": \"Description atualizado {{ATUALIZA_TODO}}\",\n  \"name\": \"Name atualizado {{ATUALIZA_TODO}}\",\n  \"id\": \"Id atualizado {{ATUALIZA_TODO}}\"\n}"
						},
						"url": {
							"raw": "{{URL_BASE}}/todo/{{TODO_ID}}",
							"host": [
								"{{URL_BASE}}"
							],
							"path": [
								"todo",
								"{{TODO_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Atualizar ‘todo’ de usuário inexistente",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var atualizaNumero = pm.variables.replaceIn('{{$randomInt}}');",
									"postman.setEnvironmentVariable(\"ATUALIZA_TODO\", atualizaNumero);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var body = JSON.parse(responseBody);",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Should have a success false\", function () {",
									"    pm.expect(jsonData.success).to.eql(false);",
									"});",
									"",
									"pm.test(\"Should have a data response\", function (){",
									"    pm.expect(pm.response.text()).to.include('\"data\":');",
									"});",
									"",
									"pm.test(\"Should have a validation error message\", function(){",
									"    pm.expect(jsonData.data.message).to.eql(\"TODO_NOT_FOUND\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"updatedAt\": \"{{$isoTimestamp}}\",\n  \"createdAt\": \"{{$isoTimestamp}}\",\n  \"userId\": \"UserId atualizado {{ATUALIZA_TODO}}\",\n  \"description\": \"Description atualizado {{ATUALIZA_TODO}}\",\n  \"name\": \"Name atualizado {{ATUALIZA_TODO}}\",\n  \"id\": \"Id atualizado {{ATUALIZA_TODO}}\"\n}"
						},
						"url": {
							"raw": "{{URL_BASE}}/todo/12345567",
							"host": [
								"{{URL_BASE}}"
							],
							"path": [
								"todo",
								"12345567"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cenário Deletar ‘todo’ de um usuário",
			"item": [
				{
					"name": "Deletar ‘todo’ de usuário existente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var body = JSON.parse(responseBody);",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Should have a success true\", function () {",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});",
									"",
									"pm.test(\"Should have a data response\", function (){",
									"    pm.expect(pm.response.text()).to.include('\"data\":');",
									"});",
									"",
									"pm.test(\"Should have correct information\", function(){",
									"    pm.expect(jsonData.data.code).to.eql(\"DELETED SUCCESSFULLY\");",
									"    pm.expect(jsonData.data.name).to.eql(\"DELETED_SUCCESSFULLY\");",
									"    pm.expect(jsonData.data.message).to.eql(\"Deletado com sucesso\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{URL_BASE}}/todo/{{TODO_ID}}",
							"host": [
								"{{URL_BASE}}"
							],
							"path": [
								"todo",
								"{{TODO_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletar ‘todo’ de usuário inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var body = JSON.parse(responseBody);",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Should have a success true\", function () {",
									"    pm.expect(jsonData.success).to.eql(false);",
									"});",
									"",
									"pm.test(\"Should have a data response\", function (){",
									"    pm.expect(pm.response.text()).to.include('\"data\":');",
									"});",
									"",
									"pm.test(\"Should have error information\", function(){",
									"    pm.expect(jsonData.data.code).to.eql(\"TODO not found\");",
									"    pm.expect(jsonData.data.name).to.eql(\"TODO_NOT_FOUND\");",
									"    pm.expect(jsonData.data.message).to.eql(\"Todo não encontrado\");",
									"    pm.expect(jsonData.data.errorCode).to.eql(\"TODO not found\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{URL_BASE}}/todo/12345",
							"host": [
								"{{URL_BASE}}"
							],
							"path": [
								"todo",
								"12345"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cenário Deletar usuário",
			"item": [
				{
					"name": "Deletar usuário existente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var body = JSON.parse(responseBody);",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Should have a success true\", function () {",
									"    pm.expect(jsonData.success).to.eql(true);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "{{JWT_TOKEN}}"
							}
						],
						"url": {
							"raw": "{{URL_BASE}}/account",
							"host": [
								"{{URL_BASE}}"
							],
							"path": [
								"account"
							]
						}
					},
					"response": []
				},
				{
					"name": "Deletar usuário inexistente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var body = JSON.parse(responseBody);",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Should have a success false\", function () {",
									"    pm.expect(jsonData.success).to.eql(false);",
									"});",
									"",
									"pm.test(\"Should have a data response\", function (){",
									"    pm.expect(pm.response.text()).to.include('\"data\":');",
									"});",
									"",
									"pm.test(\"Should have a validation error message\", function(){",
									"    pm.expect(jsonData.data.message).to.eql(\"UNAUTHORIZED\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Token errado"
							}
						],
						"url": {
							"raw": "{{URL_BASE}}/account",
							"host": [
								"{{URL_BASE}}"
							],
							"path": [
								"account"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "CPF",
			"value": "",
			"type": "string"
		},
		{
			"key": "URL_BASE",
			"value": "https://c94dh2pfp1.execute-api.us-west-2.amazonaws.com",
			"type": "string"
		}
	]
}